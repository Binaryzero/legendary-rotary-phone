{
  "permissions": {
    "allow": [
      "Bash(python test:*)",
      "Bash(mv:*)",
      "Bash(ls:*)",
      "Bash(./scripts/type-check.sh:*)",
      "Bash(mypy:*)",
      "Bash(make:*)",
      "Bash(python3:*)",
      "Bash(python:*)",
      "Bash(grep:*)",
      "Bash(jq:*)",
      "Bash(rmdir:*)",
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "WebFetch(domain:github.com)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(gh pr create:*)",
      "Bash(git checkout:*)",
      "Bash(rg:*)",
      "Bash(bash:*)",
      "Bash(rm:*)",
      "Bash(git commit:*)",
      "Bash(gh pr view:*)",
      "Bash(gh api:*)",
      "Bash(git pull:*)",
      "Bash(PYTHONPATH=/Users/william/Tools/legendary-rotary-phone python3 tests/test_error_handling.py)",
      "Bash(git checkout:*)",
      "Bash(awk:*)",
      "WebFetch(domain:center-for-threat-informed-defense.github.io)",
      "Bash(true)",
      "Bash(rm:*)",
      "Bash(npm install)",
      "Bash(npm audit:*)",
      "Bash(npm run build:*)",
      "Bash(sed:*)",
      "Bash(diff:*)",
      "Bash(timeout 5 python -m backend.app)",
      "Bash(chmod:*)",
      "Bash(timeout 10 python:*)",
      "Bash(npm run typecheck:*)",
      "Bash(npm run tsc:*)",
      "Bash(npx tsc:*)",
      "Bash(/dev/null)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(curl:*)",
      "WebFetch(domain:api.github.com)",
      "Bash(PYTHONPATH=. python:*)",
      "Bash(PYTHONPATH=.. python -c \"\nimport sys\nsys.path.insert(0, ''..'')\ntry:\n    from odin.core.engine import VulnerabilityResearchEngine\n    print('' ODIN import successful'')\nexcept ImportError as e:\n    print(f'' ODIN import failed: {e}'')\n\n# Test the backend app initialization\ntry:\n    from app import app, TOOLKIT_AVAILABLE\n    print(f'' Backend app initialized, toolkit available: {TOOLKIT_AVAILABLE}'')\nexcept Exception as e:\n    print(f'' Backend init failed: {e}'')\n\")",
      "Bash(timeout:*)",
      "Bash(gtimeout 10 npm start)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(git fetch:*)",
      "Bash(git tag:*)",
      "Bash(gh release list:*)",
      "Bash(gh release view:*)",
      "Bash(git stash:*)",
      "Bash(gh release create:*)",
      "Bash(gh pr list:*)"
    ],
    "deny": []
  }
}